@page "/adminpanel"
@using cAPParel.BlazorApp.Models
@using Blazorise.TreeView
@using Blazorise.Bootstrap
@using Blazorise.Icons
@using cAPParel.BlazorApp.Services.UserServices
@inject ILocalStorageService storageService
@inject NavigationManager NavigationManager
@inject cAPParel.BlazorApp.Services.ItemServices.IItemService itemService;
@inject cAPParel.BlazorApp.Services.CategoryServices.ICategoryService categoryService;
@inject cAPParel.BlazorApp.Services.OrderServices.IOrderService orderService;
@inject IUserService userService
@rendermode InteractiveServer

<div class="form-group">
    <label for="adminSelect">Choose an action:</label>
    <select class="form-control" id="adminSelect" @onchange="OnSelectionChanged">
        <option value="0">Categories</option>
        <option value="1">Items</option>
        <option value="2">Orders</option>
        <option value="3">Users</option>
    </select>
</div>

@switch (selected)
{
    case 0:      
        <ul class="myUL">
            <CategoryComponent Category="MainCategory" OnCreateSubcategory="AddSubcategory" OnDeleteCategory="DeleteCategory" OnSelectCategory="SelectCategory" IsAdmin=true/>
        </ul>
        
        if(categoryCreation is true)
        {
        <form @onsubmit="CreateCategory">
            <div class="form-group">
                <label for="categoryName">Category Name</label>
                <input @bind="categoryName" type="text" class="form-control" id="categoryName" placeholder="Enter new category name" />
            </div>           
            <button type="submit" class="btn btn-primary">Create</button>
            </form>
        }
        break;
    case 1:
        <EditForm Model="item" OnValidSubmit="HandleValidSubmit" class="p-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" @bind-Value="item.Name" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <InputNumber id="price" @bind-Value="item.Price" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" @bind-Value="item.Description" class="form-control" />
            </div>

            <button type="button" @onclick="AddFileData" class="btn btn-outline-secondary mt-2">Add FileData</button>
            @if (selectedCategory is not null)
            {
                <button type="submit" class="btn btn-outline-primary mt-2">Submit</button>
            }
            else
            {
                <p class="text-warning">Please select a category to add item</p>
            }
        </EditForm>
        break;
    case 2:
        <table class="table">
        @foreach(var order in Orders.Value.Reverse())
        {
            <tr>
            <h3>@order.DateCreated.ToShortDateString(), @order.State - $ @order.TotalPrice</h3>
            <td>
            @foreach(var piece in order.Pieces)
            {
                <p>@piece.Item.Name, @piece.Size, @piece.Id</p>
            }
            </td>
            <td>
            @if (order.State == State.Accepted || order.State == State.Ongoing)
            {
                <button class="btn btn-success" @onclick="async()=>await ProceedOrder(order)">Proceed</button>
            }
            @if (order.State != State.Completed && order.State != State.Cancelled)
            {
                <button class="btn btn-danger" @onclick="async()=>await CancelOrder(order)">Cancel</button>
            }
                    </td>
                </tr>
        }
        </table>
        break;
    case 3:
        <table class="table">
            @foreach(var user in users.Value)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>Saldo: $ @user.Saldo</td>
                    <td>
                    <EditForm Model="amountToSet" OnValidSubmit="async()=>await SetBalance(user.Id,amountToSet)">
                            <InputNumber id="amounttoset" @bind-Value="amountToSet" class="form-control"/>
                            <button type="submit" class="btn btn-outline-primary mt-2">Submit</button>
                    </EditForm>
                    </td>
                </tr> 
            }
            
        </table>
        break;
    case -1:
        break;
}
<button class="btn btn-secondary" @onclick="()=>{selectedCategory=null;}">Reset Category</button>
<p>Selected Category: @if(selectedCategory is not null) {@selectedCategory.CategoryName}</p>


@if (IsVisible)
{
    <div class="popup">
        <div class="popup-content">
            <p>@Message</p>
            <button @onclick="Close">Close</button>
        </div>
    </div>
}

@code {
    double amountToSet = 0;
    int selected = -1;
    bool categoryCreation = false;
    string? categoryName = null;
    int? selectedCategoryId = null;
    ItemForCreationDto item = new ItemForCreationDto();
    LinkedResourceList<UserFullDto>? users;
    LinkedResourceList<ItemFullDto>? Items;
    LinkedResourceList<OrderFullDto>? Orders;
    LinkedResourceList<CategoryFullDto>? Categories;
    [Parameter]
    public CategoryFullDto? MainCategory { get; set; }
    IList<CategoryFullDto> expandedNodes = new List<CategoryFullDto>();
    CategoryFullDto? selectedCategory;

    [Parameter]
    public string Message { get; set; }

    private bool IsVisible { get; set; }

    private async Task ProceedOrder(OrderFullDto order)
    {
        await orderService.PatchOrderAsync(++order.State, order.Id);
        Orders = await orderService.GetOrdersFullAsync();
        StateHasChanged();

    }

    private async Task CancelOrder(OrderFullDto order)
    {
        await orderService.CancelOrderAsync(order.Id);
        Orders = await orderService.GetOrdersFullAsync();
        StateHasChanged();

    }

    public void Show(string message)
    {
        Message = message;
        IsVisible = true;
    }

    private void Close()
    {
        IsVisible = false;
    }

    private async Task SetBalance(int userId, double amount)
    {
        await userService.TopUpAccountAsync(userId, amount);
        users = await userService.GetUsersFullAsync();
        amount = 0;
        StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                Categories = await categoryService.GetCategoriesFull();
                MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
            }
            catch (Exception ex)
            {

            }
            selected = 0;
            StateHasChanged();
        }
    }
    private async Task OnSelectionChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();
        switch (selectedValue)
        {
            case "0":
                try
                {
                    Categories = await categoryService.GetCategoriesFull();
                    MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
                }
                catch(Exception ex)
                {

                }
                selected = 0;
                break;
            case "1":
                Items = await itemService.GetItemsFullAsync();
                selected = 1;
                break;
            case "2":
                Orders = await orderService.GetOrdersFullAsync();
                selected = 2;
                break;
            case "3":
                users = await userService.GetUsersFullAsync();
                selected = 3;
                break;
        }
    }

    private async Task HandleValidSubmit()
    {
        item.CategoryId = selectedCategory.Id;
        await itemService.CreateItemAsync(item);
        item = new ItemForCreationDto();
    }
    private async Task AddFileData()
    {
        item.FileData.Add(new FileDataForCreationDto());
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e, FileDataForCreationDto fileData)
    {
        var file = e.File;
        if (file != null)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            fileData.Data = ms.ToArray();
        }
    }

    private async Task AddSubcategory(CategoryFullDto category)
    {

        categoryCreation = true;
        selectedCategoryId = category.Id;
        StateHasChanged();

    }
    private async Task CreateCategory()
    {
        try
        {
            CategoryForCreationDto categoryToCreate = new CategoryForCreationDto()
                {
                    CategoryName = categoryName,
                    ParentCategoryId = selectedCategoryId
                };
            await categoryService.CreateCategoryAsync(categoryToCreate);
        }
        catch (Exception ex)
        {
            Show(ex.Message);
            StateHasChanged();
            return;
        }
        categoryCreation = false;
        selectedCategoryId = null;
        categoryName = null;
        try
        {
            Categories = await categoryService.GetCategoriesFull();
            MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
        }
        catch (Exception ex)
        {

        }
        StateHasChanged();
    }

    private async Task DeleteCategory(CategoryFullDto category)
    {
        try
        {
            await categoryService.DeleteCategoryAsync(category.Id);
        }
        catch(Exception ex)
        {
            Show(ex.Message);
            return;
        }
        try
        {
            Categories = await categoryService.GetCategoriesFull();
            MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
        }
        catch (Exception ex)
        {

        }
        StateHasChanged();
    }

    private async Task SelectCategory(CategoryFullDto category)
    {
        selectedCategory = category;
        StateHasChanged();
    }
}
<style>
    /* Remove default bullets */
    ul, #myUL {
        list-style-type: none;
    }

    /* Remove margins and padding from the parent ul */
    #myUL {
        margin: 0;
        padding: 0;
    }

    /* Style the caret/arrow */
    .caret {
        cursor: pointer;
        user-select: none; /* Prevent text selection */
    }

        /* Create the caret/arrow with a unicode, and style it */
        .caret::before {
            content: "\25B6";
            color: black;
            display: inline-block;
            margin-right: 6px;
        }

    /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
    .caret-down::before {
        transform: rotate(90deg);
    }

    /* Hide the nested list */
    .nested {
        display: none;
    }

    /* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
    .active {
        display: block;
    }
</style>