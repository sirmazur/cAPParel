@page "/adminpanel"
@using cAPParel.BlazorApp.Models
@using Blazorise.TreeView
@using Blazorise.Bootstrap
@using Blazorise.Icons
@inject ILocalStorageService storageService
@inject NavigationManager NavigationManager
@inject cAPParel.BlazorApp.Services.ItemServices.IItemService itemService;
@inject cAPParel.BlazorApp.Services.CategoryServices.ICategoryService categoryService;
@inject cAPParel.BlazorApp.Services.OrderServices.IOrderService orderService;
@rendermode InteractiveServer

<div class="form-group">
    <label for="adminSelect">Choose an action:</label>
    <select class="form-control" id="adminSelect" @onchange="OnSelectionChanged">
        <option value="0">Manage Categories</option>
        <option value="1">Manage Items</option>
        <option value="2">Manage Orders</option>
    </select>
</div>

@switch (selected)
{
    case 0:      
        <ul class="myUL">
            <CategoryComponent Category="MainCategory" OnCreateSubcategory="AddSubcategory" OnDeleteCategory="DeleteCategory" />
        </ul>
        
        if(categoryCreation is true)
        {
        <form @onsubmit="CreateCategory">
            <div class="form-group">
                <label for="categoryName">Category Name</label>
                <input @bind="categoryName" type="text" class="form-control" id="categoryName" placeholder="Enter new category name" />
            </div>           
            <button type="submit" class="btn btn-primary">Create</button>
            </form>
        }
        break;
    case 1:
        
        break;
    case 2:

        break;
    case -1:
        break;
}


@if (IsVisible)
{
    <div class="popup">
        <div class="popup-content">
            <p>@Message</p>
            <button @onclick="Close">Close</button>
        </div>
    </div>
}

@code {
    int selected = -1;
    bool categoryCreation = false;
    string? categoryName = null;
    int? selectedCategoryId = null;
    LinkedResourceList<ItemFullDto>? Items;
    LinkedResourceList<OrderFullDto>? Orders;
    LinkedResourceList<CategoryFullDto>? Categories;
    [Parameter]
    public CategoryFullDto? MainCategory { get; set; }
    IList<CategoryFullDto> expandedNodes = new List<CategoryFullDto>();
    CategoryFullDto? selectedNode;

    [Parameter]
    public string Message { get; set; }

    private bool IsVisible { get; set; }

    public void Show(string message)
    {
        Message = message;
        IsVisible = true;
    }

    private void Close()
    {
        IsVisible = false;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                Categories = await categoryService.GetCategoriesFull();
                MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
            }
            catch (Exception ex)
            {

            }
            selected = 0;
            StateHasChanged();
        }
    }
    private async Task OnSelectionChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();
        switch (selectedValue)
        {
            case "0":
                try
                {
                    Categories = await categoryService.GetCategoriesFull();
                    MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
                }
                catch(Exception ex)
                {

                }
                selected = 0;
                break;
            case "1":
                Items = await itemService.GetItemsFullAsync();
                selected = 1;
                break;
            case "2":
                Orders = await orderService.GetOrdersFullAsync();
                selected = 2;
                break;
        }
    }

    private async Task HandleCategoryClicked(CategoryFullDto category)
    {

    }

    private async Task AddSubcategory(CategoryFullDto category)
    {

        categoryCreation = true;
        selectedCategoryId = category.Id;
        StateHasChanged();

    }
    private async Task CreateCategory()
    {
        try
        {
            CategoryForCreationDto categoryToCreate = new CategoryForCreationDto()
                {
                    CategoryName = categoryName,
                    ParentCategoryId = selectedCategoryId
                };
            await categoryService.CreateCategoryAsync(categoryToCreate);
        }
        catch (Exception ex)
        {
            Show(ex.Message);
            StateHasChanged();
            return;
        }
        categoryCreation = false;
        selectedCategoryId = null;
        categoryName = null;
        try
        {
            Categories = await categoryService.GetCategoriesFull();
            MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
        }
        catch (Exception ex)
        {

        }
        StateHasChanged();
    }

    private async Task DeleteCategory(CategoryFullDto category)
    {
        try
        {
            await categoryService.DeleteCategoryAsync(category.Id);
        }
        catch(Exception ex)
        {
            Show(ex.Message);
            return;
        }
        try
        {
            Categories = await categoryService.GetCategoriesFull();
            MainCategory = Categories.Value.FirstOrDefault(c => c.ParentCategoryId == null);
        }
        catch (Exception ex)
        {

        }
        StateHasChanged();
    }
}
<style>
    /* Remove default bullets */
    ul, #myUL {
        list-style-type: none;
    }

    /* Remove margins and padding from the parent ul */
    #myUL {
        margin: 0;
        padding: 0;
    }

    /* Style the caret/arrow */
    .caret {
        cursor: pointer;
        user-select: none; /* Prevent text selection */
    }

        /* Create the caret/arrow with a unicode, and style it */
        .caret::before {
            content: "\25B6";
            color: black;
            display: inline-block;
            margin-right: 6px;
        }

    /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
    .caret-down::before {
        transform: rotate(90deg);
    }

    /* Hide the nested list */
    .nested {
        display: none;
    }

    /* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
    .active {
        display: block;
    }
</style>