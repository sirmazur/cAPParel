@using cAPParel.BlazorApp.Models
@inject cAPParel.BlazorApp.Services.CategoryServices.ICategoryService categoryService;



@if (Category != null)
{
    
        @if (Category.ChildCategories != null && Category.ChildCategories.Any())
        {
        <li>
            <span class="@("caret " + (isExpanded ? "caret-down" : ""))" @onclick="() => {Toggle();OnSelectCategory.InvokeAsync(Category);}">@Category.CategoryName</span>
            @if (IsAdmin is true)
            {
                <button class="btn btn-success" @onclick="() => OnCreateSubcategory.InvokeAsync(Category)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
            </button>
            <button class="btn btn-danger" @onclick="() => OnDeleteCategory.InvokeAsync(Category)">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash" viewBox="0 0 16 16">
                    <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                </svg>
            </button>
            }
            <ul class="@("nested " + (isExpanded ? "active" : ""))">
                @foreach (var childCategory in Category.ChildCategories)
                {
                    if(IsAdmin is true)
                    {
                        <CategoryComponent Category="childCategory" OnCreateSubcategory="OnCreateSubcategory" OnDeleteCategory="OnDeleteCategory" OnSelectCategory="OnSelectCategory" IsAdmin=true/>
                    }
                    else
                    {
                        <CategoryComponent Category="childCategory" OnCreateSubcategory="OnCreateSubcategory" OnDeleteCategory="OnDeleteCategory" OnSelectCategory="OnSelectCategory" IsAdmin=false/>
                    }

                    
                }
            </ul>
        </li>
        }
        else
        {
        <li>
            <span @onclick = "()=>OnSelectCategory.InvokeAsync(Category)">@Category.CategoryName</span> 
            @if (IsAdmin is true)
            {
                <button class="btn btn-success" @onclick="() => OnCreateSubcategory.InvokeAsync(Category)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
            </button>
            <button class="btn btn-danger" @onclick="() => OnDeleteCategory.InvokeAsync(Category)">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash" viewBox="0 0 16 16">
                    <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                </svg>
            </button>
            }
        </li>
        }

}

@code {
    [Parameter]
    public CategoryFullDto Category { get; set; }

    private bool isExpanded = false;
    [Parameter]
    public EventCallback<CategoryFullDto> OnCreateSubcategory { get; set; }

    [Parameter]
    public EventCallback<CategoryFullDto> OnDeleteCategory { get; set; }

    [Parameter]
    public EventCallback<CategoryFullDto> OnSelectCategory { get; set; }

    [Parameter]
    public bool IsAdmin { get; set; }

    void Toggle()
    {
        isExpanded = !isExpanded;
        StateHasChanged();
    }
}

<style>
    /* Remove default bullets */
    ul, #myUL {
        list-style-type: none;
    }

    /* Remove margins and padding from the parent ul */
    #myUL {
        margin: 0;
        padding: 0;
    }

    /* Style the caret/arrow */
    .caret {
        cursor: pointer;
        user-select: none; /* Prevent text selection */
    }

        /* Create the caret/arrow with a unicode, and style it */
        .caret::before {
            content: "\25B6";
            color: black;
            display: inline-block;
            margin-right: 6px;
        }

    /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
    .caret-down::before {
        transform: rotate(90deg);
    }

    /* Hide the nested list */
    .nested {
        display: none;
    }

    /* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
    .active {
        display: block;
    }

    .btn {
        flex-grow: 1;
        margin: 10px; /* Adjust this value to add extra space for padding */
    }
</style>