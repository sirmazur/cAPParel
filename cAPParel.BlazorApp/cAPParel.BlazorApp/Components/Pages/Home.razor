@page "/"
@using cAPParel.BlazorApp.Models
@using cAPParel.BlazorApp.Services.ItemServices
@inject cAPParel.BlazorApp.Services.ItemServices.IItemService itemService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<PageTitle>Home</PageTitle>

<h2>New items</h2>
@if (newItems is not null && newItems.Value is not null)
{
    <div id="carouselNew" class="carousel slide" data-bs-ride="carousel" style="">
        <div class="carousel-inner">

            @foreach (var item in newItems.Value)
            {
                i++;
                var active = i == 1 ? "active" : "";
                var base64String = Convert.ToBase64String(item.FileData.FirstOrDefault(c => c.Type==DataType.Image).Data);

                <div class="carousel-item @active">
                    <img src="data:image/png;base64,@base64String" class="d-block w-100" alt="@item.Name">
                    <div class="carousel-caption d-none d-md-block d-flex flex-column justify-content-between" style="height: 100%;">
                        <h5 style="padding-top: 5px; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">
                            @item.Name
                        </h5>
                        <div style="display: flex; flex-direction: column; justify-content: flex-end; height: 100%;">
                            <p class="noclass" style="color: darksalmon; font-weight: bold; bottom: 0; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">@(item.Description)</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselNew" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselNew" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
}
else
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}


<h2>Discounted items</h2>
@if (discountedItems is not null && discountedItems.Value is not null)
{
    <div id="carouselExample" class="carousel slide" data-bs-ride="carousel" style="">
        <div class="carousel-inner">

            @foreach(var item in discountedItems.Value)
            {
                j++;
                var active = j == 1 ? "active" : "";
                var base64String = Convert.ToBase64String(item.FileData.FirstOrDefault(c => c.Type==DataType.Image).Data);

                <div class="carousel-item @active">
                    <img src="data:image/png;base64,@base64String" class="d-block w-100" alt="@item.Name">
                    <div class="carousel-caption d-none d-md-block d-flex flex-column justify-content-between" style="height: 100%;">
                        <h5 style="padding-top: 5px; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">
                            @item.Name
                        </h5>
                        <div style="display: flex; flex-direction: column; justify-content: flex-end; height: 100%;">
                            <p class="noclass" style="text-decoration: line-through; color: darkred; font-weight: bold; bottom: 0; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">$@item.Price</p>
                            <p class="noclass" style="color:green; font-weight: bold; bottom: 0; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">$@(item.Price*item.PriceMultiplier)</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
}
else
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}



@code
{
    int i = 0;
    int j = 0;
    private LinkedResourceList<ItemFullDto> newItems = new LinkedResourceList<ItemFullDto>();
    private LinkedResourceList<ItemFullDto> discountedItems = new LinkedResourceList<ItemFullDto>();
    private bool first;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {          
            var filters = new ItemFilters()
                {
                    OrderBy = "DateCreated desc"
                };
            newItems = await itemService.GetItemsFullAsync(filters);
            filters.OrderBy = "PriceMultiplier asc";
            discountedItems = await itemService.GetItemsFullAsync(filters);
            StateHasChanged();
        }      
        
    }  
    // protected override async void OnInitialized()
    // {
    //     var filters = new ItemFilters()
    //     {
    //         OrderBy = "DateCreated desc"
    //     };
    //     newItems = await itemService.GetItemsFullAsync(filters);
    //     filters.OrderBy = "PriceMultiplier asc";
    //     discountedItems = await itemService.GetItemsFullAsync(filters);


    // }
}

<style>
    .carousel {
        max-width: 60%;
        height: 30vh; /* Set the fixed height for the carousel */
        margin: auto;
        box-shadow: 0 10px 20px rgba(128,0,128,0.3), 0 6px 6px rgba(255,105,180,0.3);
        border: 3px solid #EF7812;
        border-radius: 3px; /* Rounded corners */
        padding-bottom: 20px;
        transition: all 0.2s ease; /* Smooth transition for hover effects */
    }

        .carousel:hover {
            box-shadow: 0 14px 28px rgba(128,0,128,0.4), 0 10px 10px rgba(255,105,180,0.4);
        }

    .carousel-inner {
        height: 100%;
    }

    .carousel-item {
        height: 100%;
    }

    .carousel-item img {
        height: 100%;
        width: 100%;
        object-fit: contain;
    }

    .carousel-control-prev-icon {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23FA8717' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E");
    }

    .carousel-control-next-icon {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23FA8717' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E");
    }
    h2{
        text-align: center;
        color: orange;
        font-weight: 800;
    }
</style>


 
