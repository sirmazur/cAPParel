@page "/"
@using cAPParel.BlazorApp.Models
@using cAPParel.BlazorApp.Services.ItemServices
@inject cAPParel.BlazorApp.Services.ItemServices.IItemService itemService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<PageTitle>Home</PageTitle>

<h1>Newest items</h1>
@if(newItems is not null && newItems.Value is not null){
        <div id="carouselNew" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
       
          
            @foreach(var item in newItems.Value)
            {
                i++;
                var active = i == 1 ? "active" : "";                
                var base64String = Convert.ToBase64String(item.FileData.FirstOrDefault(c=>c.Type==DataType.Image).Data);

                    <div class="carousel-item @active">
                        <img class="d-block w-100" src="data:image/png;base64,@base64String" alt="@item.Name">
                    </div>              
            }
            
        </div>
        <button class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </button>
        <button class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </button>
        </div>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}


<h2>Discounted items</h2>
@if (discountedItems is not null && discountedItems.Value is not null)
{
    <div id="carouselExample" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">

            @foreach(var item in discountedItems.Value)
            {
                j++;
                var active = j == 1 ? "active" : "";
                var base64String = Convert.ToBase64String(item.FileData.FirstOrDefault(c => c.Type==DataType.Image).Data);
                if(j==1)
                {
                    <div class="carousel-item active">
                        <img src="data:image/png;base64,@base64String" class="d-block w-100" alt="@item.Name">
                    </div>
                }
                else
                {
                    <div class="carousel-item">
                        <img src="data:image/png;base64,@base64String" class="d-block w-100" alt="@item.Name">
                    </div>
                }
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}



@code
{
    int i = 0;
    int j = 0;
    private LinkedResourceList<ItemFullDto> newItems = new LinkedResourceList<ItemFullDto>();
    private LinkedResourceList<ItemFullDto> discountedItems = new LinkedResourceList<ItemFullDto>();
    private bool first;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {          
            var filters = new ItemFilters()
                {
                    OrderBy = "DateCreated desc"
                };
            newItems = await itemService.GetItemsFullAsync(filters);
            filters.OrderBy = "PriceMultiplier asc";
            discountedItems = await itemService.GetItemsFullAsync(filters);
            StateHasChanged();
        }      
        
    }  
    // protected override async void OnInitialized()
    // {
    //     var filters = new ItemFilters()
    //     {
    //         OrderBy = "DateCreated desc"
    //     };
    //     newItems = await itemService.GetItemsFullAsync(filters);
    //     filters.OrderBy = "PriceMultiplier asc";
    //     discountedItems = await itemService.GetItemsFullAsync(filters);


    // }
}


 
