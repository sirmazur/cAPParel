@page "/profile"
@using cAPParel.BlazorApp.Models
@using cAPParel.BlazorApp.Services.OrderServices
@using cAPParel.BlazorApp.Services.UserServices
@inject ILocalStorageService storageService
@inject IUserService userService
@inject IOrderService orderService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>User Profile</h3>
<button class="btn btn-primary" @onclick=Logout>Log Out</button>
@if (userData == null)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <table class="table">
        <tr>
            <td>Username</td>
            <td>@userData.Username</td>
        </tr>
        <tr>
            <td>Role</td>
            <td>@userData.Role</td>
        </tr>
        <tr>
            <td>Saldo</td>
            <td>$ @user.Saldo</td>
        </tr>
        <tr>
            <td>
                Cart total: $ @userData.Cart.Sum(c=>c.Item.Price*c.Item.PriceMultiplier)
                @if (user.Saldo>=userData.Cart.Sum(c => c.Item.Price*c.Item.PriceMultiplier))
                {
                    <button class="btn btn-success" @onclick="FinalizePurchase">Complete purchase</button>
                }              
                @foreach (var piece in userData.Cart)
                {
                    <p>@piece.Item.Name, @piece.Size, $ @(piece.Item.Price*piece.Item.PriceMultiplier)</p>
                    <button class="btn btn-danger" @onclick='async () => {
                        userData.Cart.Remove(piece);
                        await storageService.SetItemAsync("userdata", userData); 
                        StateHasChanged();}'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash" viewBox="0 0 16 16">
                            <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                        </svg>
                    </button>
                }
            </td>
        </tr>
        @foreach (var order in user.Orders)
        {
            <tr>
                <td>
                <h3>@order.DateCreated.ToShortDateString(), @order.State - $ @order.TotalPrice</h3>
                </td>
                <td>
                    @if (order.State != State.Completed && order.State != State.Cancelled)
                    {
                        <button class="btn btn-danger" @onclick="async()=>await CancelOrder(order)">Cancel</button>
                    }
                </td>
            </tr>
        }
    
    </table>  
}


@code {
    private UserData? userData;
    private UserFullDto? user;
    private OrderForCreationDto orderToCreate = new OrderForCreationDto();



    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            user = await userService.GetSelfFull();
            userData = await storageService.GetItemAsync<UserData>("userdata");
            StateHasChanged();
        }
    }

    private async Task CancelOrder(OrderDto order)
    {
        await orderService.CancelOrderAsync(order.Id);
        user = await userService.GetSelfFull();
        StateHasChanged();
    }

    private async Task FinalizePurchase()
    {
        var ids = userData.Cart.Select(c => c.Id).ToList();
        await orderService.CreateOrderAsync(ids);
        userData.Cart.Clear();
        await storageService.SetItemAsync("userdata", userData);
        user = await userService.GetSelfFull();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await storageService.RemoveItemAsync("userdata");
        NavigationManager.NavigateTo("/");
    }
}